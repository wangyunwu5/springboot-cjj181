<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.springboot.dao.UserDao">

	<insert id="insertUser" parameterType="User" keyProperty="id" useGeneratedKeys="true">
		INSERT INTO users VALUES(null,
			#{name},
			#{username},
			#{password},
			#{email},
			#{phone},
			#{photo},
			#{role},
			#{date},
			#{company.id}
		)
	</insert>

	<update id="updateUser" parameterType="User">
		UPDATE users 
	    <set>
            <if test="name != null">name=#{name},</if>
            <if test="password != null">password=#{password},</if>
            <if test="email != null">email=#{email},</if>
            <if test="phone != null">phone=#{phone},</if>
            <if test="photo != null">photo=#{photo},</if>
            <if test="role != null">role=#{role},</if>
            <if test="date != null">date =#{date},</if>
            <if test="companyid != null">companyid =#{companyid},</if>
        </set>
		WHERE id=#{id}
	</update>

	<update id="updatePass" parameterType="User">
		UPDATE users SET 
			password=#{password}
		WHERE id=#{id}
	</update>
	
    <update id="updateEmil" parameterType="User">
		UPDATE users SET 
			email=#{email}
		WHERE id=#{id}
	</update>

	<delete id="deleteUser" parameterType="User">
		DELETE FROM users WHERE id=#{id}
	</delete>

	<select id="findInfoUser" parameterType="Map" resultMap="UserMap">
		select * from users
		<where>
			<if test="id != null">
				id = #{id}
			</if>
			<if test="username != null">
				and username = #{username}
			</if>
			<if test="password != null">
				and password = #{password}
			</if>
			<if test="email != null">
				and email = #{email}
			</if>
			<if test="phone != null">
				and phone = #{phone}
			</if>
			<if test="company != null">
				and companyid = #{company.id}
			</if>
		</where>
	</select>
	
	<select id="findListUser" parameterType="Map" resultMap="UserMap">
		select * from users
		<where>
			<if test="name != null">
				and name like #{name}
			</if>
			<if test="company != null">
				and companyid = #{company.id}
			</if>
		</where>
		order by date desc
		<if test="page > 0">
			limit 15 offset page
		</if>
	</select>
	
	<select id="getCount" parameterType="Map" resultType="int">
		select count(*) from users
		<where>
			<if test="name != null">
				and name like #{name}
			</if>
			<if test="company != null">
				and companyid = #{company.id}
			</if>
		</where>
	</select>

	<select id="getUserListByPage" parameterType="Map" resultMap="UserMap">
		select *,( select name from company where company.id = users.companyid ) as companyName from users
		<where>
			<if test="keyword != null">
				and ( name like #{keyword} or username like #{keyword} or phone like #{keyword} or email like #{keyword})
			</if>
			<if test="companyid != 0">
			    and companyid = #{companyid}
			</if>
		</where> 
		order by date desc
		<if test="pageIndex > 0">
			limit #{pageSize} offset #{pageIndex}
		</if>
	</select>
	
	<select id="getCountByPage" parameterType="Map" resultType="int">
		select count(*) from users
		<where>
			<if test="keyword != null">
				and ( name like #{keyword} or username like #{keyword} or phone like #{keyword} or email like #{keyword})
			</if>
			<if test="companyid != 0">
			    and companyid = #{companyid}
			</if>
		</where>
	</select>

	<resultMap id="UserMap" type="User">
		<id property="id" column="id"/>
		<result property="name" column="name"/>
		<result property="username" column="username"/>
		<result property="password" column="password"/>
		<result property="email" column="email"/>
		<result property="phone" column="phone"/>
		<result property="role" column="role"/>
		<result property="date" column="date"/>
		<result property="companyName" column="companyName" /> 
		<result property="company.id" column="companyid"/>
	</resultMap>
	
</mapper>
 